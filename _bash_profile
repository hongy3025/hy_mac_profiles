export BLOCKSIZE=K
export EDITOR=vim
export PAGER=less

alias ls='/usr/local/bin/gls --color'
alias df='df -h'
alias du='du -h'
alias ll='ls -l'
alias la='ls -la'

alias grep='grep --color'

export TERM=xterm-256color
export CLICOLOR=yes
eval `gdircolors ~/.dircolors`

export GOROOT=$HOME/devel/app/go
export GOPATH=$HOME/devel/go

export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export NDK_ROOT=$HOME/devel/android/ndk
export ANDORID_HOME=$HOME/devel/android/sdk
export ANDROID_SDK_ROOT=$ANDORID_HOME
export VERSIONER_PYTHON_PREFER_32_BIT=yes

export REQUIRED_JVM_ARGS="-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml -Didea.patches.url=http://dl.google.com/android/studio/patches/"

export PATH=$GOPATH/bin:$HOME/local/bin:/usr/local/ant/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/tools:$GOROOT/bin:$PATH:/Applications/Xcode.app/Contents/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin

export PATH=$HOME/devel/g9/client/trunk/tools/webp/webp/mac/bin:$PATH

export G9=~/devel/g9
export G9_BRANCHES=$G9/client
export G9_TRUNK=$G9_BRANCHES/trunk
export G9_DESIGN=$G9/design

title() {
	export SHELL_TITLE=$1
    echo -ne "\033]0;$SHELL_TITLE - `pwd`\007"
}

cd() {
	builtin cd "$@"
   	echo -ne "\033]0;$SHELL_TITLE - `pwd`\007"
}

g9() {
 if [ "$1" == "" ]; then
	 cd $G9_TRUNK/
 else
	 cd $G9_BRANCHES/$1
 fi
 pwd
}

g9r() {
 g9 $1
 cd resources
 pwd
}

g9c() {
 g9 $1
 cd resources/codes
 pwd
}

gios() {
 g9 $1
 cd engine/g9/proj.ios
 pwd
}

gandroid() {
 g9 $1
 cd engine/g9/proj.android
 pwd
}

gmac() {
 g9 $1
 cd engine/g9/proj.mac
 pwd
}

ggo() {
 cd ~/devel/go/src
 pwd
}

lmac() {
	g9 $1
	cd tools/gen_ui
	./gen_ui_all.sh
	g9r $1
	../engine/g9/proj.mac/build/Debug/g9_mac.app/Contents/MacOS/g9_mac
}

mf() {
	cd ~/devel/minisf/client
	pwd
}

mfr() {
	mf
	cd resources
	pwd
}

mfc() {
	mf
	cd resources/script
	pwd
}

lmf() {
	mfr
	~/devel/minisf/client/engine/minisf/proj.mac/build/Debug/minisf_mac.app/Contents/MacOS/minisf_mac
}

sagent() {
 eval `ssh-agent`
}

export C_INCLUDE_PATH=$C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LIBRARY_PATH=$LIBRARY_PATH

# cd to the path of the front Finder window
cdf() {
	target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
	if [ "$target" != "" ]; then
		cd "$target"; pwd
	else
		echo 'No Finder window found' >&2
	fi
}

rLoginServer() {
	/opt/macports/bin/ssh -p 32200 hongy@$1
}

dev22() {
	rLoginServer 192.168.11.22
}

devqa() {
	rLoginServer 192.168.11.221
}

gs2000() {
	rLoginServer 54.165.190.145
}

gs2500() {
	rLoginServer 123.58.170.250
}

gs3000() {
	rLoginServer 223.252.222.113
}

tb() {
	rLoginServer 123.58.170.250
}

aws() {
	ssh -i ~/.ssh/datatribe.pem hongy@52.11.78.217
}

cdgo() {
	cd ~/devel/go/src
	pwd
}

# Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x
export COCOS_CONSOLE_ROOT=/Users/hongy/devel/src/cocos2d-x-3.2/tools/cocos2d-console/bin
export PATH=$COCOS_CONSOLE_ROOT:$PATH

# Add environment variable ANT_ROOT for cocos2d-x
export ANT_ROOT=/usr/local/ant/bin
export PATH=$ANT_ROOT:$PATH
